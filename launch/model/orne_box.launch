<?xml version="1.0"?>
<launch>
  <!-- Arguments -->
  <arg name="output" default="screen"/>
  <arg name="namespace" default="simulator"/>
  <arg name="robot_description" default="robot_description"/>
  <arg name="world_name" default="ground_plane"/>
  <arg name="position_x" default="1.0"/>
  <arg name="position_y" default="1.0"/>
  <arg name="position_z" default="0.3"/>
  <arg name="euler_angles_x" default="0.0"/>
  <arg name="euler_angles_y" default="0.0"/>
  <arg name="euler_angles_z" default="0.0"/>
  <arg name="joint_state_topic" default="/joint_states"/>
  <arg name="imu_topic" default="/imu_data"/>
  <arg name="cmd_vel_topic" default="/icart_mini/cmd_vel"/>
  <arg name="odom_topic" default="/icart_mini/odom"/>
  <arg name="rfans_points_topic" default="/rfans/surestar_points"/>
  <arg name="rfans_scan_topic" default="/rfans/surestar_scan"/>
  <arg name="hokuyo_scan_topic" default="/hokuyo_scan"/>
  <arg name="zed_node_camera_info_topic" default="/zed_node/rgb/camera_info"/>
  <arg name="zed_node_image_topic" default="/zed_node/rgb/image_rect_color"/>
  <arg name="zed_node_depth_image_topic" default="/zed_node/depth/depth_registered"/>
  <arg name="zed_node_points_topic" default="/zed_node/point_cloud/cloud_registered"/>
  <arg name="gnss_navsat_topic" default="/ublox/fix"/>
  <arg name="robot_name" default="orne_box"/>
  <arg name="base_frame" default="base_link"/>
  <!-- Nodes -->
  <group ns="$(arg namespace)" clear_params="true">
    <param name="robot_description" command="xacro $(find orne_box_description)/urdf/orne_box_3d_lidar.urdf.xacro ignition_gazebo:=true enable_camera:=false"/>
    <node pkg="ros_ign_gazebo" type="create" name="robot_spawner" output="$(arg output)" args="
      -world $(arg world_name) \
      -param $(arg robot_description) \
      -x $(arg position_x) \
      -y $(arg position_y) \
      -z $(arg position_z) \
      -R $(arg euler_angles_x) \
      -P $(arg euler_angles_y) \
      -Y $(arg euler_angles_z)">
    </node>
    <node pkg="joint_state_publisher" type="joint_state_publisher" name="joint_state_merger" output="$(arg output)">
      <rosparam>
        source_list:
          - joint_state_bridge/joint_states
        rate: 50
        publish_default_positions: true
        publish_default_velocities: true
        publish_default_efforts: true
      </rosparam>
      <remap from="joint_states" to="$(arg joint_state_topic)"/>
    </node>
    <include file="$(find orne_box_ign_sim)/launch/includes/ros_ign_bridge.launch">
      <arg name="ign_topic" value="/model/$(arg robot_name)/joint_states"/>
      <arg name="ros_topic" value="~/joint_states"/>
      <arg name="convert_args" value="sensor_msgs/JointState[ignition.msgs.Model"/>
      <arg name="bridge_node_name" value="joint_state_bridge"/>
      <arg name="with_stf" value="false"/>
    </include>
    <include file="$(find orne_box_ign_sim)/launch/includes/ros_ign_bridge.launch">
      <arg name="ign_topic" value="/model/$(arg robot_name)/imu"/>
      <arg name="ros_topic" value="$(arg imu_topic)"/>
      <arg name="convert_args" value="sensor_msgs/Imu[ignition.msgs.IMU"/>
      <arg name="ros_frame_id" value="imu_link"/>
      <arg name="ign_frame_id" value="$(arg robot_name)/$(arg base_frame)/imu_link"/>
    </include>
    <include file="$(find orne_box_ign_sim)/launch/includes/ros_ign_bridge.launch">
      <arg name="ign_topic" value="/model/$(arg robot_name)/points"/>
      <arg name="ros_topic" value="$(arg rfans_points_topic)"/>
      <arg name="convert_args" value="sensor_msgs/PointCloud2[ignition.msgs.PointCloudPacked"/>
      <arg name="ros_frame_id" value="surestar"/>
      <arg name="ign_frame_id" value="$(arg robot_name)/$(arg base_frame)/surestar"/>
    </include>
    <include file="$(find orne_box_ign_sim)/launch/includes/ros_ign_bridge.launch">
      <arg name="ign_topic" value="/model/$(arg robot_name)/rfans/points"/>
      <arg name="ros_topic" value="$(arg rfans_points_topic)"/>
      <arg name="convert_args" value="sensor_msgs/PointCloud2[ignition.msgs.PointCloudPacked"/>
      <arg name="ros_frame_id" value="surestar"/>
      <arg name="ign_frame_id" value="$(arg robot_name)/$(arg base_frame)/surestar"/>
    </include>
    <include file="$(find orne_box_ign_sim)/launch/includes/ros_ign_bridge.launch">
      <arg name="ign_topic" value="/model/$(arg robot_name)/rfans"/>
      <arg name="ros_topic" value="$(arg rfans_scan_topic)"/>
      <arg name="convert_args" value="sensor_msgs/LaserScan[ignition.msgs.LaserScan"/>
      <arg name="ros_frame_id" value="surestar"/>
      <arg name="ign_frame_id" value="$(arg robot_name)/$(arg base_frame)/surestar"/>
    </include>
    <include file="$(find orne_box_ign_sim)/launch/includes/ros_ign_bridge.launch">
      <arg name="ign_topic" value="/model/$(arg robot_name)/hokuyo_scan"/>
      <arg name="ros_topic" value="$(arg hokuyo_scan_topic)"/>
      <arg name="convert_args" value="sensor_msgs/LaserScan[ignition.msgs.LaserScan"/>
      <arg name="ros_frame_id" value="hokuyo_link"/>
      <arg name="ign_frame_id" value="$(arg robot_name)/$(arg base_frame)/head_hokuyo_sensor"/>
    </include>
    <include file="$(find orne_box_ign_sim)/launch/includes/ros_ign_bridge.launch">
      <arg name="ign_topic" value="/model/$(arg robot_name)/odometry"/>
      <arg name="ros_topic" value="$(arg odom_topic)"/>
      <arg name="convert_args" value="nav_msgs/Odometry[ignition.msgs.Odometry"/>
      <arg name="ros_frame_id" value="odom"/>
      <arg name="ign_frame_id" value="$(arg robot_name)/odom"/>
    </include>
    <include file="$(find orne_box_ign_sim)/launch/includes/ros_ign_bridge.launch">
      <arg name="ign_topic" value="/model/$(arg robot_name)/cmd_vel"/>
      <arg name="ros_topic" value="$(arg cmd_vel_topic)"/>
      <arg name="convert_args" value="geometry_msgs/Twist]ignition.msgs.Twist"/>
      <arg name="with_stf" value="false"/>
    </include>
    <include file="$(find orne_box_ign_sim)/launch/includes/ros_ign_bridge.launch">
      <arg name="ign_topic" value="/model/$(arg robot_name)/pose"/>
      <arg name="ros_topic" value="~/pose"/>
      <arg name="bridge_node_name" value="correct_pose_bridge"/>
      <arg name="convert_args" value="geometry_msgs/Pose[ignition.msgs.Pose"/>
      <arg name="with_stf" value="false"/>
    </include>
    <include file="$(find orne_box_ign_sim)/launch/includes/ros_ign_bridge.launch">
      <arg name="ign_topic" value="/model/$(arg robot_name)/navsat"/>
      <arg name="ros_topic" value="$(arg gnss_navsat_topic)"/>
      <arg name="convert_args" value="sensor_msgs/NavSatFix[ignition.msgs.NavSat"/>
      <arg name="ros_frame_id" value="gnss_link"/>
      <arg name="ign_frame_id" value="$(arg robot_name)/gnss_link"/>
    </include>
    <include file="$(find orne_box_ign_sim)/launch/includes/ros_ign_image_bridge.launch">
      <arg name="ign_topic" value="/model/$(arg robot_name)/zed_node/image"/>
      <arg name="ros_topic" value="$(arg zed_node_image_topic)"/>
      <arg name="ign_camera_info_topic" value="/model/$(arg robot_name)/zed_node/camera_info"/>
      <arg name="ros_camera_info_topic" value="$(arg zed_node_camera_info_topic)"/>
      <arg name="ros_frame_id" value="zed_camera_center"/>
      <arg name="ign_frame_id" value="$(arg robot_name)/zed_camera_center"/>
    </include>
    <include file="$(find orne_box_ign_sim)/launch/includes/ros_ign_image_bridge.launch">
      <arg name="ign_topic" value="/model/$(arg robot_name)/zed_node/depth_image"/>
      <arg name="ros_topic" value="$(arg zed_node_depth_image_topic)"/>
      <arg name="with_stf" value="false"/>
      <arg name="with_camera_info" value="false"/>
    </include>
    <include file="$(find orne_box_ign_sim)/launch/includes/ros_ign_bridge.launch">
      <arg name="ign_topic" value="/model/$(arg robot_name)/depth_image/points"/>
      <arg name="ros_topic" value="$(arg zed_node_points_topic)"/>
      <arg name="convert_args" value="sensor_msgs/PointCloud2[ignition.msgs.PointCloudPacked"/>
      <arg name="ros_frame_id" value="zed_camera_center"/>
      <arg name="ign_frame_id" value="$(arg robot_name)/zed_depth_camera_center"/>
    </include>
    <node pkg="tf2_ros" type="static_transform_publisher" name="base_stf"
      args="0 0 0 0 0 0 base_link $(arg robot_name)/$(arg base_frame)"
    />
  </group>
  <node pkg="tf2_ros" type="buffer_server" name="tf_buffer_server" output="$(arg output)">
  </node>
  <param name="robot_description" command="xacro $(find orne_box_description)/urdf/orne_box_3d_lidar.urdf.xacro"/>
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="$(arg output)">
  </node>
  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization" output="$(arg output)">
    <rosparam command="load" file="$(find orne_box_ign_sim)/config/robot_localization.yaml"/>
  </node>
</launch>
